// Generated by Cap'n Proto compiler, DO NOT EDIT
// source: calculator.capnp

#include "calculator.capnp.h"

namespace capnp {
namespace schemas {
static const ::capnp::_::AlignedData<67> b_97983392df35cc36 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     54, 204,  53, 223, 146,  51, 152, 151,
     17,   0,   0,   0,   3,   0,   0,   0,
     75, 209, 102, 115,  17,  11,  21, 133,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 226,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     89,   0,   0,   0, 199,   0,   0,   0,
    221,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   1,   0,   1,   0,
     21, 141,  84, 245, 202, 215,  56, 212,
     25,   0,   0,   0,  90,   0,   0,   0,
    210,  72, 238, 211,  52, 157, 230, 195,
     25,   0,   0,   0,  50,   0,   0,   0,
    148,   3, 132, 150,  61,  58, 232, 237,
     21,   0,   0,   0,  74,   0,   0,   0,
    230, 223, 230,  97, 120,  64, 147, 135,
     21,   0,   0,   0,  74,   0,   0,   0,
     69, 120, 112, 114, 101, 115, 115, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     86,  97, 108, 117, 101,   0,   0,   0,
     70, 117, 110,  99, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     79, 112, 101, 114,  97, 116, 111, 114,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    212,  54, 122,  85, 225, 170,  14, 187,
     17, 166, 135,  88, 245, 163, 177, 129,
     81,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    137, 220,  86,  69, 186, 188, 135, 242,
    200, 214, 124,   4, 101, 244,  36, 141,
     61,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     53,   0,   0,   0,   7,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     48, 197, 163, 244, 180, 206, 141, 138,
     32, 140, 192,  99, 119, 187, 143, 209,
     41,   0,   0,   0,  98,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,   7,   0,   0,   0,
    101, 118,  97, 108, 117,  97, 116, 101,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    100, 101, 102,  70, 117, 110,  99, 116,
    105, 111, 110,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
    103, 101, 116,  79, 112, 101, 114,  97,
    116, 111, 114,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_97983392df35cc36 = b_97983392df35cc36.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_97983392df35cc36[] = {
  &s_81b1a3f55887a611,
  &s_8a8dceb4f4a3c530,
  &s_8d24f465047cd6c8,
  &s_bb0eaae1557a36d4,
  &s_d18fbb7763c08c20,
  &s_f287bcba4556dc89,
};
static const uint16_t m_97983392df35cc36[] = {1, 0, 2};
const ::capnp::_::RawSchema s_97983392df35cc36 = {
  0x97983392df35cc36, b_97983392df35cc36.words, 67, d_97983392df35cc36, m_97983392df35cc36,
  6, 3, nullptr, nullptr, nullptr, { &s_97983392df35cc36, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<74> b_d438d7caf5548d15 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     21, 141,  84, 245, 202, 215,  56, 212,
     28,   0,   0,   0,   1,   0,   2,   0,
     54, 204,  53, 223, 146,  51, 152, 151,
      2,   0,   7,   0,   0,   0,   4,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  58,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 231,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  69, 120, 112, 114,
    101, 115, 115, 105, 111, 110,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   3,   0,   4,   0,
      0,   0, 255, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97,   0,   0,   0,  66,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     92,   0,   0,   0,   3,   0,   1,   0,
    104,   0,   0,   0,   2,   0,   1,   0,
      1,   0, 254, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    101,   0,   0,   0, 122,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    100,   0,   0,   0,   3,   0,   1,   0,
    112,   0,   0,   0,   2,   0,   1,   0,
      2,   0, 253, 255,   0,   0,   0,   0,
      0,   0,   1,   0,   2,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    109,   0,   0,   0,  82,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108,   0,   0,   0,   3,   0,   1,   0,
    120,   0,   0,   0,   2,   0,   1,   0,
      3,   0, 252, 255,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
    102, 141, 135, 211, 163,  34, 149, 217,
    117,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    108, 105, 116, 101, 114,  97, 108,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112, 114, 101, 118, 105, 111, 117, 115,
     82, 101, 115, 117, 108, 116,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    210,  72, 238, 211,  52, 157, 230, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 101, 116, 101,
    114,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108, 108,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d438d7caf5548d15 = b_d438d7caf5548d15.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d438d7caf5548d15[] = {
  &s_c3e69d34d3ee48d2,
  &s_d99522a3d3878d66,
};
static const uint16_t m_d438d7caf5548d15[] = {3, 0, 2, 1};
static const uint16_t i_d438d7caf5548d15[] = {0, 1, 2, 3};
const ::capnp::_::RawSchema s_d438d7caf5548d15 = {
  0xd438d7caf5548d15, b_d438d7caf5548d15.words, 74, d_d438d7caf5548d15, m_d438d7caf5548d15,
  2, 4, i_d438d7caf5548d15, nullptr, nullptr, { &s_d438d7caf5548d15, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<54> b_d99522a3d3878d66 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    102, 141, 135, 211, 163,  34, 149, 217,
     39,   0,   0,   0,   1,   0,   2,   0,
     21, 141,  84, 245, 202, 215,  56, 212,
      2,   0,   7,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  69, 120, 112, 114,
    101, 115, 115, 105, 111, 110,  46,  99,
     97, 108, 108,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   3,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   1,   0,   4,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     72,   0,   0,   0,   2,   0,   1,   0,
    102, 117, 110,  99, 116, 105, 111, 110,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    148,   3, 132, 150,  61,  58, 232, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     21, 141,  84, 245, 202, 215,  56, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d99522a3d3878d66 = b_d99522a3d3878d66.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d99522a3d3878d66[] = {
  &s_d438d7caf5548d15,
  &s_ede83a3d96840394,
};
static const uint16_t m_d99522a3d3878d66[] = {0, 1};
static const uint16_t i_d99522a3d3878d66[] = {0, 1};
const ::capnp::_::RawSchema s_d99522a3d3878d66 = {
  0xd99522a3d3878d66, b_d99522a3d3878d66.words, 54, d_d99522a3d3878d66, m_d99522a3d3878d66,
  2, 2, i_d99522a3d3878d66, nullptr, nullptr, { &s_d99522a3d3878d66, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_c3e69d34d3ee48d2 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    210,  72, 238, 211,  52, 157, 230, 195,
     28,   0,   0,   0,   3,   0,   0,   0,
     54, 204,  53, 223, 146,  51, 152, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  18,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  86,  97, 108, 117,
    101,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     88, 181, 141, 213, 116,  37,  83, 211,
     34, 232,  42,  18,  35, 103, 190, 230,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
    114, 101,  97, 100,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_c3e69d34d3ee48d2 = b_c3e69d34d3ee48d2.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_c3e69d34d3ee48d2[] = {
  &s_d3532574d58db558,
  &s_e6be6723122ae822,
};
static const uint16_t m_c3e69d34d3ee48d2[] = {0};
const ::capnp::_::RawSchema s_c3e69d34d3ee48d2 = {
  0xc3e69d34d3ee48d2, b_c3e69d34d3ee48d2.words, 30, d_c3e69d34d3ee48d2, m_c3e69d34d3ee48d2,
  2, 1, nullptr, nullptr, nullptr, { &s_c3e69d34d3ee48d2, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<18> b_d3532574d58db558 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     88, 181, 141, 213, 116,  37,  83, 211,
     34,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 114,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  86,  97, 108, 117,
    101,  46, 114, 101,  97, 100,  36,  80,
     97, 114,  97, 109, 115,   0,   0,   0, }
};
::capnp::word const* const bp_d3532574d58db558 = b_d3532574d58db558.words;
#if !CAPNP_LITE
const ::capnp::_::RawSchema s_d3532574d58db558 = {
  0xd3532574d58db558, b_d3532574d58db558.words, 18, nullptr, nullptr,
  0, 0, nullptr, nullptr, nullptr, { &s_d3532574d58db558, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_e6be6723122ae822 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     34, 232,  42,  18,  35, 103, 190, 230,
     34,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  86,  97, 108, 117,
    101,  46, 114, 101,  97, 100,  36,  82,
    101, 115, 117, 108, 116, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_e6be6723122ae822 = b_e6be6723122ae822.words;
#if !CAPNP_LITE
static const uint16_t m_e6be6723122ae822[] = {0};
static const uint16_t i_e6be6723122ae822[] = {0};
const ::capnp::_::RawSchema s_e6be6723122ae822 = {
  0xe6be6723122ae822, b_e6be6723122ae822.words, 34, nullptr, m_e6be6723122ae822,
  0, 1, i_e6be6723122ae822, nullptr, nullptr, { &s_e6be6723122ae822, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<30> b_ede83a3d96840394 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    148,   3, 132, 150,  61,  58, 232, 237,
     28,   0,   0,   0,   3,   0,   0,   0,
     54, 204,  53, 223, 146,  51, 152, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  71,   0,   0,   0,
     73,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  70, 117, 110,  99,
    116, 105, 111, 110,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
      4,   0,   0,   0,   3,   0,   5,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     23, 119, 184, 112, 223,  96, 145, 177,
    173, 222,  20, 105, 247, 171, 224, 192,
     17,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      5,   0,   0,   0,   7,   0,   0,   0,
     99,  97, 108, 108,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   1,   0,
      0,   0,   0,   0,   1,   0,   1,   0, }
};
::capnp::word const* const bp_ede83a3d96840394 = b_ede83a3d96840394.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_ede83a3d96840394[] = {
  &s_b19160df70b87717,
  &s_c0e0abf76914dead,
};
static const uint16_t m_ede83a3d96840394[] = {0};
const ::capnp::_::RawSchema s_ede83a3d96840394 = {
  0xede83a3d96840394, b_ede83a3d96840394.words, 30, d_ede83a3d96840394, m_ede83a3d96840394,
  2, 1, nullptr, nullptr, nullptr, { &s_ede83a3d96840394, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<39> b_b19160df70b87717 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     23, 119, 184, 112, 223,  96, 145, 177,
     37,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 138,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  70, 117, 110,  99,
    116, 105, 111, 110,  46,  99,  97, 108,
    108,  36,  80,  97, 114,  97, 109, 115,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     36,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109, 115,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   3,   0,   1,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     14,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_b19160df70b87717 = b_b19160df70b87717.words;
#if !CAPNP_LITE
static const uint16_t m_b19160df70b87717[] = {0};
static const uint16_t i_b19160df70b87717[] = {0};
const ::capnp::_::RawSchema s_b19160df70b87717 = {
  0xb19160df70b87717, b_b19160df70b87717.words, 39, nullptr, m_b19160df70b87717,
  0, 1, i_b19160df70b87717, nullptr, nullptr, { &s_b19160df70b87717, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<35> b_c0e0abf76914dead = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    173, 222,  20, 105, 247, 171, 224, 192,
     37,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 146,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     37,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  70, 117, 110,  99,
    116, 105, 111, 110,  46,  99,  97, 108,
    108,  36,  82, 101, 115, 117, 108, 116,
    115,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     11,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_c0e0abf76914dead = b_c0e0abf76914dead.words;
#if !CAPNP_LITE
static const uint16_t m_c0e0abf76914dead[] = {0};
static const uint16_t i_c0e0abf76914dead[] = {0};
const ::capnp::_::RawSchema s_c0e0abf76914dead = {
  0xc0e0abf76914dead, b_c0e0abf76914dead.words, 35, nullptr, m_c0e0abf76914dead,
  0, 1, i_c0e0abf76914dead, nullptr, nullptr, { &s_c0e0abf76914dead, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<37> b_8793407861e6dfe6 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    230, 223, 230,  97, 120,  64, 147, 135,
     28,   0,   0,   0,   2,   0,   0,   0,
     54, 204,  53, 223, 146,  51, 152, 151,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  42,   1,   0,   0,
     37,   0,   0,   0,   7,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 103,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46,  79, 112, 101, 114,
     97, 116, 111, 114,   0,   0,   0,   0,
      0,   0,   0,   0,   1,   0,   1,   0,
     16,   0,   0,   0,   1,   0,   2,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  34,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      2,   0,   0,   0,   0,   0,   0,   0,
     29,   0,   0,   0,  74,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      3,   0,   0,   0,   0,   0,   0,   0,
     25,   0,   0,   0,  58,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     97, 100, 100,   0,   0,   0,   0,   0,
    115, 117,  98, 116, 114,  97,  99, 116,
      0,   0,   0,   0,   0,   0,   0,   0,
    109, 117, 108, 116, 105, 112, 108, 121,
      0,   0,   0,   0,   0,   0,   0,   0,
    100, 105, 118, 105, 100, 101,   0,   0, }
};
::capnp::word const* const bp_8793407861e6dfe6 = b_8793407861e6dfe6.words;
#if !CAPNP_LITE
static const uint16_t m_8793407861e6dfe6[] = {0, 3, 2, 1};
const ::capnp::_::RawSchema s_8793407861e6dfe6 = {
  0x8793407861e6dfe6, b_8793407861e6dfe6.words, 37, nullptr, m_8793407861e6dfe6,
  0, 4, nullptr, nullptr, nullptr, { &s_8793407861e6dfe6, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
CAPNP_DEFINE_ENUM(Operator_8793407861e6dfe6, 8793407861e6dfe6);
static const ::capnp::_::AlignedData<35> b_bb0eaae1557a36d4 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    212,  54, 122,  85, 225, 170,  14, 187,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0,  98,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46, 101, 118,  97, 108,
    117,  97, 116, 101,  36,  80,  97, 114,
     97, 109, 115,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     12,   0,   0,   0,   3,   0,   1,   0,
     24,   0,   0,   0,   2,   0,   1,   0,
    101, 120, 112, 114, 101, 115, 115, 105,
    111, 110,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     21, 141,  84, 245, 202, 215,  56, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_bb0eaae1557a36d4 = b_bb0eaae1557a36d4.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_bb0eaae1557a36d4[] = {
  &s_d438d7caf5548d15,
};
static const uint16_t m_bb0eaae1557a36d4[] = {0};
static const uint16_t i_bb0eaae1557a36d4[] = {0};
const ::capnp::_::RawSchema s_bb0eaae1557a36d4 = {
  0xbb0eaae1557a36d4, b_bb0eaae1557a36d4.words, 35, d_bb0eaae1557a36d4, m_bb0eaae1557a36d4,
  1, 1, i_bb0eaae1557a36d4, nullptr, nullptr, { &s_bb0eaae1557a36d4, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_81b1a3f55887a611 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     17, 166, 135,  88, 245, 163, 177, 129,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 106,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46, 101, 118,  97, 108,
    117,  97, 116, 101,  36,  82, 101, 115,
    117, 108, 116, 115,   0,   0,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  50,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    118,  97, 108, 117, 101,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    210,  72, 238, 211,  52, 157, 230, 195,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_81b1a3f55887a611 = b_81b1a3f55887a611.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_81b1a3f55887a611[] = {
  &s_c3e69d34d3ee48d2,
};
static const uint16_t m_81b1a3f55887a611[] = {0};
static const uint16_t i_81b1a3f55887a611[] = {0};
const ::capnp::_::RawSchema s_81b1a3f55887a611 = {
  0x81b1a3f55887a611, b_81b1a3f55887a611.words, 34, d_81b1a3f55887a611, m_81b1a3f55887a611,
  1, 1, i_81b1a3f55887a611, nullptr, nullptr, { &s_81b1a3f55887a611, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<50> b_f287bcba4556dc89 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    137, 220,  86,  69, 186, 188, 135, 242,
     28,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0, 119,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46, 100, 101, 102,  70,
    117, 110,  99, 116, 105, 111, 110,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      8,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     41,   0,   0,   0,  90,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     40,   0,   0,   0,   3,   0,   1,   0,
     52,   0,   0,   0,   2,   0,   1,   0,
      1,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     49,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     44,   0,   0,   0,   3,   0,   1,   0,
     56,   0,   0,   0,   2,   0,   1,   0,
    112,  97, 114,  97, 109,  67, 111, 117,
    110, 116,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      4,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     98, 111, 100, 121,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
     21, 141,  84, 245, 202, 215,  56, 212,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     16,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_f287bcba4556dc89 = b_f287bcba4556dc89.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_f287bcba4556dc89[] = {
  &s_d438d7caf5548d15,
};
static const uint16_t m_f287bcba4556dc89[] = {1, 0};
static const uint16_t i_f287bcba4556dc89[] = {0, 1};
const ::capnp::_::RawSchema s_f287bcba4556dc89 = {
  0xf287bcba4556dc89, b_f287bcba4556dc89.words, 50, d_f287bcba4556dc89, m_f287bcba4556dc89,
  1, 2, i_f287bcba4556dc89, nullptr, nullptr, { &s_f287bcba4556dc89, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_8d24f465047cd6c8 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
    200, 214, 124,   4, 101, 244,  36, 141,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46, 100, 101, 102,  70,
    117, 110,  99, 116, 105, 111, 110,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 117, 110,  99,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    148,   3, 132, 150,  61,  58, 232, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8d24f465047cd6c8 = b_8d24f465047cd6c8.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8d24f465047cd6c8[] = {
  &s_ede83a3d96840394,
};
static const uint16_t m_8d24f465047cd6c8[] = {0};
static const uint16_t i_8d24f465047cd6c8[] = {0};
const ::capnp::_::RawSchema s_8d24f465047cd6c8 = {
  0x8d24f465047cd6c8, b_8d24f465047cd6c8.words, 34, d_8d24f465047cd6c8, m_8d24f465047cd6c8,
  1, 1, i_8d24f465047cd6c8, nullptr, nullptr, { &s_8d24f465047cd6c8, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_8a8dceb4f4a3c530 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     48, 197, 163, 244, 180, 206, 141, 138,
     28,   0,   0,   0,   1,   0,   1,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 122,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46, 103, 101, 116,  79,
    112, 101, 114,  97, 116, 111, 114,  36,
     80,  97, 114,  97, 109, 115,   0,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  26,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    111, 112,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
    230, 223, 230,  97, 120,  64, 147, 135,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     15,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_8a8dceb4f4a3c530 = b_8a8dceb4f4a3c530.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_8a8dceb4f4a3c530[] = {
  &s_8793407861e6dfe6,
};
static const uint16_t m_8a8dceb4f4a3c530[] = {0};
static const uint16_t i_8a8dceb4f4a3c530[] = {0};
const ::capnp::_::RawSchema s_8a8dceb4f4a3c530 = {
  0x8a8dceb4f4a3c530, b_8a8dceb4f4a3c530.words, 34, d_8a8dceb4f4a3c530, m_8a8dceb4f4a3c530,
  1, 1, i_8a8dceb4f4a3c530, nullptr, nullptr, { &s_8a8dceb4f4a3c530, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
static const ::capnp::_::AlignedData<34> b_d18fbb7763c08c20 = {
  {   0,   0,   0,   0,   5,   0,   6,   0,
     32, 140, 192,  99, 119, 187, 143, 209,
     28,   0,   0,   0,   1,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      1,   0,   7,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     21,   0,   0,   0, 130,   1,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     33,   0,   0,   0,  63,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     99,  97, 108,  99, 117, 108,  97, 116,
    111, 114,  46,  99,  97, 112, 110, 112,
     58,  67,  97, 108,  99, 117, 108,  97,
    116, 111, 114,  46, 103, 101, 116,  79,
    112, 101, 114,  97, 116, 111, 114,  36,
     82, 101, 115, 117, 108, 116, 115,   0,
      4,   0,   0,   0,   3,   0,   4,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   1,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     13,   0,   0,   0,  42,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      8,   0,   0,   0,   3,   0,   1,   0,
     20,   0,   0,   0,   2,   0,   1,   0,
    102, 117, 110,  99,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
    148,   3, 132, 150,  61,  58, 232, 237,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
     17,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0,
      0,   0,   0,   0,   0,   0,   0,   0, }
};
::capnp::word const* const bp_d18fbb7763c08c20 = b_d18fbb7763c08c20.words;
#if !CAPNP_LITE
static const ::capnp::_::RawSchema* const d_d18fbb7763c08c20[] = {
  &s_ede83a3d96840394,
};
static const uint16_t m_d18fbb7763c08c20[] = {0};
static const uint16_t i_d18fbb7763c08c20[] = {0};
const ::capnp::_::RawSchema s_d18fbb7763c08c20 = {
  0xd18fbb7763c08c20, b_d18fbb7763c08c20.words, 34, d_d18fbb7763c08c20, m_d18fbb7763c08c20,
  1, 1, i_d18fbb7763c08c20, nullptr, nullptr, { &s_d18fbb7763c08c20, nullptr, nullptr, 0, 0, nullptr }
};
#endif  // !CAPNP_LITE
}  // namespace schemas
}  // namespace capnp

// =======================================================================================


#if !CAPNP_LITE
::capnp::Request< ::Calculator::EvaluateParams,  ::Calculator::EvaluateResults>
Calculator::Client::evaluateRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Calculator::EvaluateParams,  ::Calculator::EvaluateResults>(
      0x97983392df35cc36ull, 0, sizeHint);
}
::kj::Promise<void> Calculator::Server::evaluate(EvaluateContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "calculator.capnp:Calculator", "evaluate",
      0x97983392df35cc36ull, 0);
}
::capnp::Request< ::Calculator::DefFunctionParams,  ::Calculator::DefFunctionResults>
Calculator::Client::defFunctionRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Calculator::DefFunctionParams,  ::Calculator::DefFunctionResults>(
      0x97983392df35cc36ull, 1, sizeHint);
}
::kj::Promise<void> Calculator::Server::defFunction(DefFunctionContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "calculator.capnp:Calculator", "defFunction",
      0x97983392df35cc36ull, 1);
}
::capnp::Request< ::Calculator::GetOperatorParams,  ::Calculator::GetOperatorResults>
Calculator::Client::getOperatorRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Calculator::GetOperatorParams,  ::Calculator::GetOperatorResults>(
      0x97983392df35cc36ull, 2, sizeHint);
}
::kj::Promise<void> Calculator::Server::getOperator(GetOperatorContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "calculator.capnp:Calculator", "getOperator",
      0x97983392df35cc36ull, 2);
}
::kj::Promise<void> Calculator::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0x97983392df35cc36ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("calculator.capnp:Calculator", interfaceId);
  }
}
::kj::Promise<void> Calculator::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return evaluate(::capnp::Capability::Server::internalGetTypedContext<
           ::Calculator::EvaluateParams,  ::Calculator::EvaluateResults>(context));
    case 1:
      return defFunction(::capnp::Capability::Server::internalGetTypedContext<
           ::Calculator::DefFunctionParams,  ::Calculator::DefFunctionResults>(context));
    case 2:
      return getOperator(::capnp::Capability::Server::internalGetTypedContext<
           ::Calculator::GetOperatorParams,  ::Calculator::GetOperatorResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "calculator.capnp:Calculator",
          0x97983392df35cc36ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Calculator
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::Expression
#ifndef _MSC_VER
constexpr uint16_t Calculator::Expression::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::Expression::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::Expression::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::Expression::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::Expression::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::Expression::Call
#ifndef _MSC_VER
constexpr uint16_t Calculator::Expression::Call::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::Expression::Call::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::Expression::Call::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::Expression::Call::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::Expression::Call::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Calculator::Value::ReadParams,  ::Calculator::Value::ReadResults>
Calculator::Value::Client::readRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Calculator::Value::ReadParams,  ::Calculator::Value::ReadResults>(
      0xc3e69d34d3ee48d2ull, 0, sizeHint);
}
::kj::Promise<void> Calculator::Value::Server::read(ReadContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "calculator.capnp:Calculator.Value", "read",
      0xc3e69d34d3ee48d2ull, 0);
}
::kj::Promise<void> Calculator::Value::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xc3e69d34d3ee48d2ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("calculator.capnp:Calculator.Value", interfaceId);
  }
}
::kj::Promise<void> Calculator::Value::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return read(::capnp::Capability::Server::internalGetTypedContext<
           ::Calculator::Value::ReadParams,  ::Calculator::Value::ReadResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "calculator.capnp:Calculator.Value",
          0xc3e69d34d3ee48d2ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Calculator::Value
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::Value::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::Value::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::Value::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::Value::ReadParams
#ifndef _MSC_VER
constexpr uint16_t Calculator::Value::ReadParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::Value::ReadParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::Value::ReadParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::Value::ReadParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::Value::ReadParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::Value::ReadResults
#ifndef _MSC_VER
constexpr uint16_t Calculator::Value::ReadResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::Value::ReadResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::Value::ReadResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::Value::ReadResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::Value::ReadResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

#if !CAPNP_LITE
::capnp::Request< ::Calculator::Function::CallParams,  ::Calculator::Function::CallResults>
Calculator::Function::Client::callRequest(::kj::Maybe< ::capnp::MessageSize> sizeHint) {
  return newCall< ::Calculator::Function::CallParams,  ::Calculator::Function::CallResults>(
      0xede83a3d96840394ull, 0, sizeHint);
}
::kj::Promise<void> Calculator::Function::Server::call(CallContext) {
  return ::capnp::Capability::Server::internalUnimplemented(
      "calculator.capnp:Calculator.Function", "call",
      0xede83a3d96840394ull, 0);
}
::kj::Promise<void> Calculator::Function::Server::dispatchCall(
    uint64_t interfaceId, uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (interfaceId) {
    case 0xede83a3d96840394ull:
      return dispatchCallInternal(methodId, context);
    default:
      return internalUnimplemented("calculator.capnp:Calculator.Function", interfaceId);
  }
}
::kj::Promise<void> Calculator::Function::Server::dispatchCallInternal(
    uint16_t methodId,
    ::capnp::CallContext< ::capnp::AnyPointer, ::capnp::AnyPointer> context) {
  switch (methodId) {
    case 0:
      return call(::capnp::Capability::Server::internalGetTypedContext<
           ::Calculator::Function::CallParams,  ::Calculator::Function::CallResults>(context));
    default:
      (void)context;
      return ::capnp::Capability::Server::internalUnimplemented(
          "calculator.capnp:Calculator.Function",
          0xede83a3d96840394ull, methodId);
  }
}
#endif  // !CAPNP_LITE

// Calculator::Function
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::Function::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::Function::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::Function::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::Function::CallParams
#ifndef _MSC_VER
constexpr uint16_t Calculator::Function::CallParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::Function::CallParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::Function::CallParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::Function::CallParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::Function::CallParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::Function::CallResults
#ifndef _MSC_VER
constexpr uint16_t Calculator::Function::CallResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::Function::CallResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::Function::CallResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::Function::CallResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::Function::CallResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::EvaluateParams
#ifndef _MSC_VER
constexpr uint16_t Calculator::EvaluateParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::EvaluateParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::EvaluateParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::EvaluateParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::EvaluateParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::EvaluateResults
#ifndef _MSC_VER
constexpr uint16_t Calculator::EvaluateResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::EvaluateResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::EvaluateResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::EvaluateResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::EvaluateResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::DefFunctionParams
#ifndef _MSC_VER
constexpr uint16_t Calculator::DefFunctionParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::DefFunctionParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::DefFunctionParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::DefFunctionParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::DefFunctionParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::DefFunctionResults
#ifndef _MSC_VER
constexpr uint16_t Calculator::DefFunctionResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::DefFunctionResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::DefFunctionResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::DefFunctionResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::DefFunctionResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::GetOperatorParams
#ifndef _MSC_VER
constexpr uint16_t Calculator::GetOperatorParams::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::GetOperatorParams::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::GetOperatorParams::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::GetOperatorParams::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::GetOperatorParams::_capnpPrivate::brand;
#endif  // !CAPNP_LITE

// Calculator::GetOperatorResults
#ifndef _MSC_VER
constexpr uint16_t Calculator::GetOperatorResults::_capnpPrivate::dataWordSize;
constexpr uint16_t Calculator::GetOperatorResults::_capnpPrivate::pointerCount;
#endif
#if !CAPNP_LITE
constexpr ::capnp::Kind Calculator::GetOperatorResults::_capnpPrivate::kind;
constexpr ::capnp::_::RawSchema const* Calculator::GetOperatorResults::_capnpPrivate::schema;
constexpr ::capnp::_::RawBrandedSchema const* Calculator::GetOperatorResults::_capnpPrivate::brand;
#endif  // !CAPNP_LITE



